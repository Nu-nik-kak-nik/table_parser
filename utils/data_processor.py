import re
from typing import List, Dict

from difflib import SequenceMatcher

from config import Config
from utils.dictionary_handler import DictionaryHandler
from utils.file_reader import FileReader
from utils.logger import Logger


class DataProcessor:
    def __init__(self):
        self.config = Config()
        self.logger = Logger(__name__)
        self.dictionary_handler = DictionaryHandler(self.config.DICTIONARY_PATH)

    def process_data(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if self.config.USE_LOCAL_FILES:
                shop_products = self._load_shop_products()
                supplier_products = self._load_supplier_products()
            else:
                return []

            if not shop_products or not supplier_products:
                self.logger.error("–û–¥–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
                return []

            self.logger.info(
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shop_products)} —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ {len(supplier_products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.")

            supplier_data = self._parse_supplier_products(supplier_products)
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(supplier_data)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.")

            matched_products = self._match_products(shop_products, supplier_data)
            self.logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            return matched_products

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    def _load_shop_products(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞."""
        shop_products = FileReader.read_csv(self.config.SHOP_PRODUCTS_FILE)
        if not shop_products:
            self.logger.error("–¢–∞–±–ª–∏—Ü–∞ —Å–∫–ª–∞–¥–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return []
        return [row for row in shop_products if any(row.values())]

    def _load_supplier_products(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."""
        supplier_products = FileReader.read_csv(self.config.SUPPLIER_PRODUCTS_FILE)
        if not supplier_products:
            self.logger.error("–¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return []
        return [row for row in supplier_products if any(row.values())]

    def _match_products(self, shop_products: List[Dict], supplier_data: List[Dict]) -> List[Dict]:
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å–∫–ª–∞–¥–∞ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."""
        matched_products = []
        for shop_product in shop_products:
            if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in shop_product:
                self.logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' –≤ —Ç–æ–≤–∞—Ä–µ: {shop_product}")
                continue

            product_name = shop_product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
            external_code = shop_product.get('–í–Ω–µ—à–Ω–∏–π –∫–æ–¥', 'N/A')

            product_dict = self.dictionary_handler.get_dictionary(product_name)
            matched_suppliers = self._match_suppliers(supplier_data, product_dict, product_name)

            row = {
                '–ù–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': product_name,
                '–í–Ω–µ—à–Ω–∏–π –∫–æ–¥': external_code
            }

            for i, supplier in enumerate(matched_suppliers, start=1):
                row[f'–¶–µ–Ω–∞ {i}'] = supplier['–¶–µ–Ω–∞']
                row[f'–ü–æ—Å—Ç–∞–≤—â–∏–∫ {i}'] = supplier['–ü–æ—Å—Ç–∞–≤—â–∏–∫']

            matched_products.append(row)

        return matched_products

    def _parse_supplier_products(self, supplier_products: List[Dict]) -> List[Dict]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."""
        supplier_data = []
        supplier_columns = ['–ø–æ—Å—Ç–∞–≤—â–∏–∫', '–ü–æ—Å—Ç–∞–≤—â–∏–∫', 'supplier', 'Supplier']
        name_columns = ['–ø—Ä–∞–π—Å', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name']

        for row in supplier_products:
            supplier = self._extract_supplier(row, supplier_columns)
            product_name = self._extract_product_name(row, name_columns)

            if not product_name or not supplier:
                continue

            price = self._extract_price(row, product_name)

            if price is None:
                continue

            product_name = self._clean_product_name(product_name)

            if not self._is_valid_product_advanced(product_name, supplier):
                continue

            supplier_data.append({
                '–ü–æ—Å—Ç–∞–≤—â–∏–∫': supplier,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': product_name,
                '–¶–µ–Ω–∞': price
            })

            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product_name}, –¶–µ–Ω–∞: {price}, –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}")

        return supplier_data

    @staticmethod
    def _extract_supplier(row: Dict, supplier_columns: List[str]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏."""
        for col in supplier_columns:
            if col in row and row[col]:
                supplier = str(row[col]).strip()
                if supplier:
                    return supplier

        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'

    @staticmethod
    def _extract_product_name(row: Dict, name_columns: List[str]) -> str | None:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏."""
        for col in name_columns:
            if col in row and row[col]:
                name = str(row[col]).strip()
                if name and len(name) > 3:
                    return name

        return None

    @staticmethod
    def _extract_price(row: Dict, product_name: str) -> int | None:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
        price_patterns = [
            r'\s(\d{4,5})\s*(?:‚ÇΩ|—Ä—É–±|rub|\$)?$',
            r'(\d{4,5})\s*[‚ÇΩ$]',
            r'\b(\d{4,5})\b',
        ]

        for pattern in price_patterns:
            match = re.search(pattern, product_name)
            if match:
                try:
                    price = int(match.group(1))
                    if 1000 <= price <= 300000:
                        return price
                except (ValueError, TypeError):
                    continue

        price_columns = ['–¶–µ–Ω–∞', '—Ü–µ–Ω–∞', 'price', 'Price']
        for col in price_columns:
            if col in row and row[col]:
                try:
                    price = int(row[col])
                    if 1000 <= price <= 300000:
                        return price
                except (ValueError, TypeError):
                    continue

        return None

    @staticmethod
    def _clean_product_name(product_name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."""
        product_name = re.sub(r'[^\w\s/.-]', '', product_name)

        product_name = re.sub(r'\s*\d+(?:‚ÇΩ|$|üá∞üáø)\s*', '', product_name)
        product_name = re.sub(r'üá∫üá∏|üá∑üá∫|üá™üá∫|üá¶üá™|üáÆüá≥|üá∞üáø', '', product_name)

        product_name = re.sub(r'\s*-\s*', ' ', product_name)

        return ' '.join(product_name.split()).strip()

    @staticmethod
    def _is_valid_product_advanced(product_name: str, supplier: str) -> bool:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        supplier_keywords = {
            'HI': ['AirPods', 'iPhone', 'iPad', 'Watch', 'Mac'],
            'MiHonor': ['Samsung', 'Xiaomi', 'Redmi', 'Apple'],
            'YouTakeAll': ['Google', 'Samsung', 'Pixel', 'Apple'],
            '112–ø–∞–≤': ['iPhone', 'AirPods', 'iPad', 'Samsung']
        }

        stop_words = ['—Å–∫–∏–¥–∫–∞', '–¥–µ–ø–æ–∑–∏—Ç', r'–æ—Ç \d+—à—Ç']

        for word in stop_words:
            if re.search(word, product_name, re.IGNORECASE):
                return False

        if supplier in supplier_keywords:
            return any(
                keyword.lower() in product_name.lower()
                for keyword in supplier_keywords[supplier]
            )

        return True

    def _match_suppliers(self, supplier_data: List[Dict], product_dict: List[str], product_name: str) -> List[Dict]:
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞."""
        matched = []

        keywords = self._clean_keywords(product_name)

        memory_pattern = re.search(r'(\d+/\d+)\s*(?:GB|–ì–ë)', product_name, re.IGNORECASE)
        memory_config = memory_pattern.group(1) if memory_pattern else None

        color_pattern = re.search(r'\b(black|white|blue|red|green|silver|gold)\b', product_name, re.IGNORECASE)
        color = color_pattern.group(0) if color_pattern else None

        potential_matches = []
        for supplier_product in supplier_data:
            supplier_name = supplier_product['–ù–∞–∑–≤–∞–Ω–∏–µ'].lower()

            similarity = SequenceMatcher(None, product_name.lower(), supplier_name).ratio()

            keyword_matches = sum(
                keyword in supplier_name
                for keyword in keywords
            )

            memory_match = (
                    memory_config and
                    memory_config in supplier_name
            ) if memory_config else False

            color_match = (
                    color and
                    color in supplier_name
            ) if color else False

            match_score = (
                    similarity * 0.6 +
                    keyword_matches * 0.3 +
                    (memory_match * 0.05) +
                    (color_match * 0.05)
            )

            if match_score > 0.4:
                potential_matches.append({
                    'product': supplier_product,
                    'score': match_score
                })

        if potential_matches:
            sorted_matches = sorted(
                potential_matches,
                key=lambda x: x['score'],
                reverse=True
            )

            best_match = sorted_matches[0]
            matched.append(best_match['product'])

        return matched

    @staticmethod
    def _clean_keywords(product_name: str) -> List[str]:
        """–û—á–∏—â–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–ª–µ—à—É."""
        product_name = re.sub(r'\s\d{4,5}\s*(?:‚ÇΩ|—Ä—É–±|rub|\$)?$', '', product_name)

        product_name = re.sub(r'\s\+\s', ' ', product_name)

        parts = re.split(r'[/]', product_name)
        keywords = []
        for part in parts:
            part = re.sub(r'[^\w\s.+]', '', part)
            keywords.extend([word.strip().lower() for word in part.split() if word.strip()])

        synonyms = {
            'type-c': 'usb-c',
            'wi-fi': 'wifi',
            'cellular': 'lte'
        }
        keywords = [synonyms.get(word, word) for word in keywords]

        return keywords