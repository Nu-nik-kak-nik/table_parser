import re

from config import Config
from utils.dictionary_handler import DictionaryHandler
from utils.file_reader import FileReader
from utils.google_sheets import GoogleSheetsHandler
from utils.logger import Logger


class DataProcessor:
    def __init__(self):
        self.config = Config()
        self.logger = Logger(__name__)
        self.dictionary_handler = DictionaryHandler(self.config.DICTIONARY_PATH)

    def process_data(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if self.config.USE_LOCAL_FILES:
                shop_products = FileReader.read_csv(self.config.SHOP_PRODUCTS_FILE)
                supplier_products = FileReader.read_csv(self.config.SUPPLIER_PRODUCTS_FILE)
            else:
                return []

            if not shop_products or not supplier_products:
                self.logger.error("–û–¥–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
                return []

            self.logger.info(
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shop_products)} —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ {len(supplier_products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.")

            supplier_data = self._parse_supplier_products(supplier_products)
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(supplier_data)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.")

            matched_products = []
            for shop_product in shop_products:
                if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in shop_product:
                    self.logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' –≤ —Ç–æ–≤–∞—Ä–µ: {shop_product}")
                    continue

                product_name = shop_product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
                external_code = shop_product.get('–í–Ω–µ—à–Ω–∏–π –∫–æ–¥', 'N/A')

                product_dict = self.dictionary_handler.get_dictionary(product_name)
                self.logger.info(f"–°–æ–∑–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}, –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {product_dict}")

                matched_suppliers = self._match_suppliers(supplier_data, product_dict, product_name)
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matched_suppliers)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}")

                row = {
                    '–ù–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': product_name,
                    '–í–Ω–µ—à–Ω–∏–π –∫–æ–¥': external_code
                }

                for i, supplier in enumerate(matched_suppliers, start=1):
                    row[f'–¶–µ–Ω–∞ {i}'] = supplier['–¶–µ–Ω–∞']
                    row[f'–ü–æ—Å—Ç–∞–≤—â–∏–∫ {i}'] = supplier['–ü–æ—Å—Ç–∞–≤—â–∏–∫']

                matched_products.append(row)

            self.logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            return matched_products

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    @staticmethod
    def _is_valid_product(product_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º."""
        invalid_patterns = [
            r'\+7-\d{3}-\d{3}-\d{2}-\d{2}',
            r'–î–µ–ø–æ–∑–∏—Ç',
            r'–°–∫–∏–¥–∫–∞',
            r'^(–û—Ç \d+—à—Ç)',
        ]

        allowed_patterns = [
            r'\b(airpods)\b',
            r'\b(iphone|ipad|samsung|xiaomi|honor)\b',
            r'\b(se2|se)\b',
        ]

        for pattern in invalid_patterns:
            if re.search(pattern, product_name, re.IGNORECASE):
                return False

        return any(
            re.search(pattern, product_name, re.IGNORECASE)
            for pattern in allowed_patterns
        )

    def _parse_supplier_products(self, supplier_products):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏."""
        supplier_data = []
        current_supplier = None

        for row in supplier_products:
            product_name = (
                    row.get('–ø—Ä–∞–π—Å', '') or
                    row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '') or
                    row.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '')
            ).strip()

            if not product_name:
                continue

            if product_name.startswith('üéß'):
                product_name = product_name.replace('üéß', '').strip()

            supplier = (
                    row.get('–ø–æ—Å—Ç–∞–≤—â–∏–∫', '') or
                    row.get('–ü–æ—Å—Ç–∞–≤—â–∏–∫', '') or
                    current_supplier or
                    '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
            ).strip()

            price = self._extract_price(product_name)

            if price is None:
                price_columns = ['—Ü–µ–Ω–∞', '–¶–µ–Ω–∞', 'price']
                for col in price_columns:
                    if col in row and row[col]:
                        try:
                            price = int(row[col])
                            break
                        except ValueError:
                            continue

            if price is None:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}")
                continue

            if not self._is_valid_product(product_name):
                if 'airpods' not in product_name.lower():
                    self.logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä: {product_name}")
                    continue

            supplier_data.append({
                '–ü–æ—Å—Ç–∞–≤—â–∏–∫': supplier,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': product_name,
                '–¶–µ–Ω–∞': price
            })
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product_name}, –¶–µ–Ω–∞: {price}, –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}")

        return supplier_data

    @staticmethod
    def _is_supplier_header(product_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        return '[' in product_name and ']' in product_name

    @staticmethod
    def _extract_supplier_name(supplier_name):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
        return supplier_name.strip()

    @staticmethod
    def _is_product_with_price(product_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä –∏ —Ü–µ–Ω—É."""
        return any(char.isdigit() for char in product_name)

    @staticmethod
    def _extract_price(product_name: str):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã
        price_patterns = [
            r'\s(\d{4,5})\s*(?:‚ÇΩ|—Ä—É–±|rub|\$)?$',
            r'(\d{4,5})\s*[‚ÇΩ$]',
            r'\b(\d{4,5})\b',
        ]

        for pattern in price_patterns:
            match = re.search(pattern, product_name)
            if match:
                try:
                    price = int(match.group(1))
                    if 1000 <= price <= 200000:
                        return price
                except (ValueError, TypeError):
                    continue

        return None

    def _match_suppliers(self, supplier_data, product_dict, product_name):
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞."""
        matched = []

        keywords = self._clean_keywords(product_name)

        memory_pattern = re.search(r'(\d+/\d+)\s*(?:GB|–ì–ë)', product_name, re.IGNORECASE)
        memory_config = memory_pattern.group(1) if memory_pattern else None

        potential_matches = []
        for supplier_product in supplier_data:
            supplier_name = supplier_product['–ù–∞–∑–≤–∞–Ω–∏–µ'].lower()

            keyword_matches = sum(
                keyword in supplier_name
                for keyword in keywords
            )

            memory_match = (
                    memory_config and
                    memory_config in supplier_name
            ) if memory_config else False

            match_score = (
                    keyword_matches * 0.5 +
                    (memory_match * 2)
            )

            if match_score > 1:
                potential_matches.append({
                    'product': supplier_product,
                    'score': match_score
                })

        if potential_matches:
            sorted_matches = sorted(
                potential_matches,
                key=lambda x: x['score'],
                reverse=True
            )

            unique_prices = {}
            unique_suppliers = set()
            for match in sorted_matches:
                price = match['product']['–¶–µ–Ω–∞']
                supplier = match['product']['–ü–æ—Å—Ç–∞–≤—â–∏–∫']

                if price not in unique_prices and supplier not in unique_suppliers:
                    unique_prices[price] = match['product']
                    unique_suppliers.add(supplier)
                    matched.append({
                        '–ü–æ—Å—Ç–∞–≤—â–∏–∫': supplier,
                        '–¶–µ–Ω–∞': price
                    })

                if len(matched) >= 5:
                    break

        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matched)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}")
        for m in matched:
            self.logger.info(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {m['–ü–æ—Å—Ç–∞–≤—â–∏–∫']}, –¶–µ–Ω–∞: {m['–¶–µ–Ω–∞']}")

        return matched

    @staticmethod
    def _contains_all_keywords(supplier_product_name, product_dict, threshold=0.5):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        matched_keywords = sum(keyword in supplier_product_name for keyword in product_dict)
        return matched_keywords / len(product_dict) >= threshold

    @staticmethod
    def _clean_keywords(product_name: str) -> list:
        name_lower = re.sub(r'\b—Å–º–∞—Ä—Ç—Ñ–æ–Ω\b', '', product_name.lower(), flags=re.IGNORECASE)

        extended_stop_words = {
            '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', 'smartfon', 'smartphone', 'phone', '—Ç–µ–ª–µ—Ñ–æ–Ω',
            'mobile', '–º–æ–±–∏–ª—å–Ω—ã–π', '—Å–æ—Ç–æ–≤—ã–π', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã'
        }

        words = name_lower.split()

        final_keywords = []

        for word in words:
            if '/' in word:
                memory_parts = word.split('/')
                final_keywords.extend([f"{part}gb" for part in memory_parts])
            else:
                if (
                        word not in extended_stop_words and
                        len(word) > 2 and
                        not word.isdigit() and
                        not re.match(r'\d+gb', word)
                ):
                    final_keywords.append(word)

        return list(set(final_keywords))


